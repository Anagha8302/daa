Sure, here's a C program that sorts a list of n numbers in ascending order using the selection sort algorithm and determines the time required to sort the elements:

```c
#include <stdio.h>
#include <time.h>

// Function to swap two numbers
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to perform selection sort
void selectionSort(int arr[], int n) {
    int i, j, min_idx;

    for (i = 0; i < n-1; i++) {
        min_idx = i;
        for (j = i+1; j < n; j++) {
            if (arr[j] < arr[min_idx])
                min_idx = j;
        }
        swap(&arr[min_idx], &arr[i]);
    }
}

int main() {
    int n, i;
    clock_t start, end;
    double cpu_time_used;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    start = clock(); // Start measuring time

    selectionSort(arr, n);

    end = clock(); // End measuring time
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("Sorted list in ascending order:\n");
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);

    printf("\nTime taken to sort: %f seconds\n", cpu_time_used);

    return 0;
}
```

This program prompts the user to enter the number of elements and the elements themselves, then it sorts them using selection sort, and finally, it prints the sorted list along with the time taken to sort the elements.








#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array and return the pivot index
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

// Function to implement quicksort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivot_index = partition(arr, low, high);
        quickSort(arr, low, pivot_index - 1);
        quickSort(arr, pivot_index + 1, high);
    }
}

int main() {
    int n;
    clock_t start, end;
    double cpu_time_used;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];

    // Generate random elements
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 1000; // Generating random numbers between 0 and 999
    }

    start = clock(); // Start measuring time

    quickSort(arr, 0, n - 1);

    end = clock(); // End measuring time
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("Sorted list in ascending order:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);

    printf("\nTime taken to sort: %f seconds\n", cpu_time_used);

    return 0;
}
