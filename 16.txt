#include <stdio.h>

// Function to find the maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the 0/1 knapsack problem using dynamic programming
int knapsack(int W, int wt[], int val[], int n) {
    int i, w;
    int K[n + 1][W + 1];

    // Build table K[][] in bottom-up manner
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }

    return K[n][W];
}

int main() {
    int val[] = {60, 100, 120}; // Values of items
    int wt[] = {10, 20, 30};     // Weights of items
    int W = 50;                  // Capacity of knapsack
    int n = sizeof(val) / sizeof(val[0]);

    printf("Maximum value that can be put in a knapsack of capacity %d: %d\n", W, knapsack(W, wt, val, n));

    return 0;
}



#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

// Function to check if the vertex v can be added at index 'pos' in the Hamiltonian cycle 'path'
bool isSafe(int v, bool graph[MAX_VERTICES][MAX_VERTICES], int path[], int pos, int V) {
    if (!graph[path[pos - 1]][v])
        return false;

    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

// Function to print the Hamiltonian cycle if one exists
void printPath(int path[], int V) {
    printf("Hamiltonian cycle exists: ");
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);
    printf("%d\n", path[0]);
}

// Function to solve Hamiltonian cycle problem using backtracking
bool hamCycleUtil(bool graph[MAX_VERTICES][MAX_VERTICES], int path[], int pos, int V) {
    if (pos == V) {
        if (graph[path[pos - 1]][path[0]])
            return true;
        else
            return false;
    }

    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos, V)) {
            path[pos] = v;
            if (hamCycleUtil(graph, path, pos + 1, V))
                return true;
            path[pos] = -1;
        }
    }

    return false;
}

// Function to check if a given graph contains a Hamiltonian cycle
bool hamCycle(bool graph[MAX_VERTICES][MAX_VERTICES], int V) {
    int path[MAX_VERTICES];
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0;
    if (!hamCycleUtil(graph, path, 1, V)) {
        printf("No Hamiltonian cycle exists\n");
        return false;
    }

    printPath(path, V);
    return true;
}

int main() {
    int V;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    bool graph[MAX_VERTICES][MAX_VERTICES];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    hamCycle(graph, V);

    return 0;
}
