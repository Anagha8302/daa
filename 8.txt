#include <stdio.h>
#include <stdlib.h>

// Structure for an item which has weight and value
struct Item {
    int value;
    int weight;
};

// Function to compare two items based on their value per unit weight
int compare(const void *a, const void *b) {
    double ratio1 = (double)(((struct Item *)a)->value) / (((struct Item *)a)->weight);
    double ratio2 = (double)(((struct Item *)b)->value) / (((struct Item *)b)->weight);
    if (ratio1 < ratio2)
        return 1; // Item with higher value per unit weight should come first
    else if (ratio1 > ratio2)
        return -1;
    else
        return 0;
}

// Function to solve the fractional knapsack problem using Greedy method
double fractionalKnapsack(int W, struct Item arr[], int n) {
    // Sort items based on value per unit weight using qsort
    qsort(arr, n, sizeof(struct Item), compare);

    double finalValue = 0.0; // Final value of items in knapsack
    int currentWeight = 0; // Current weight in knapsack

    // Loop through all items
    for (int i = 0; i < n; i++) {
        // If adding current item doesn't overflow knapsack, add it completely
        if (currentWeight + arr[i].weight <= W) {
            currentWeight += arr[i].weight;
            finalValue += arr[i].value;
        }
        // If adding current item overflows knapsack, add fraction of it
        else {
            int remainingWeight = W - currentWeight;
            finalValue += arr[i].value * ((double)remainingWeight / arr[i].weight);
            break; // Knapsack is full
        }
    }

    return finalValue;
}

int main() {
    int W = 50; // Capacity of the knapsack
    struct Item arr[] = {{60, 10}, {100, 20}, {120, 30}}; // Items with their value and weight
    int n = sizeof(arr) / sizeof(arr[0]); // Number of items

    double maxValue = fractionalKnapsack(W, arr, n);
    printf("Maximum value that can be obtained is: %.2f\n", maxValue);

    return 0;
}




#include <stdio.h>
#include <limits.h>

#define V 4 // Number of vertices in the graph

// Function to find the minimum distance vertex from the set of vertices not yet included in the tour
int minDistance(int dist[], int visited[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] < min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to find the shortest tour using the nearest neighbor algorithm
void nearestNeighbor(int graph[V][V]) {
    int tour[V]; // Stores the result tour
    int visited[V]; // Keeps track of visited vertices
    int total_distance = 0; // Total distance of the tour

    // Initialize all vertices as not visited
    for (int i = 0; i < V; i++)
        visited[i] = 0;

    // Start from vertex 0 as the starting point of the tour
    visited[0] = 1;
    tour[0] = 0;

    // Find the nearest neighbor for each vertex
    for (int i = 1; i < V; i++) {
        int current_vertex = tour[i - 1];
        int nearest_neighbor = minDistance(graph[current_vertex], visited);
        tour[i] = nearest_neighbor;
        visited[nearest_neighbor] = 1;
        total_distance += graph[current_vertex][nearest_neighbor];
    }

    // Return to the starting vertex to complete the tour
    total_distance += graph[tour[V - 1]][tour[0]];

    // Print the tour
    printf("Tour: ");
    for (int i = 0; i < V; i++)
        printf("%d ", tour[i]);
    printf("%d ", tour[0]); // Return to the starting vertex to complete the tour
    printf("\n");

    // Print the total distance of the tour
    printf("Total Distance: %d\n", total_distance);
}

int main() {
    int graph[V][V] = {{0, 10, 15, 20},
                       {10, 0, 35, 25},
                       {15, 35, 0, 30},
                       {20, 25, 30, 0}};

    nearestNeighbor(graph);

    return 0;
}
